export enum PyErrorType {
  // LexicalAnalyzer errors
  UnknownChar = 'unknownChar',
  MismatchedIndent = 'mismatchedIndent',
  UnknownEscapeChar = 'mismatchedIndent',

  // Compiler errors
  BlockExpectedColon = 'blockExpectedColon',
  IncompleteForDefinition = 'incompleteForDefinition',
  ForExpectedArgument = 'forExpectedArgument',
  ForExpectedIn = 'forExpectedIn',
  IncompleteWhileDefinition = 'incompleteWhileDefinition',
  IncompleteFunctionDeclaration = 'incompleteFunctionDeclaration',
  ExpectedFunctionName = 'expectedFunctionName',
  ExpectedFunctionArgumentList = 'expectedFunctionArgumentList',
  ExpectedArgumentName = 'expectedArgumentName',
  IncompleteFunctionArgumentList = 'incompleteFunctionArgumentList',
  ExpectedEndOfFunctionDef = 'expectedEndOfFunctionDef',
  ExpectedEndOfFunctionCall = 'expectedEndOfFunctionCall',
  IncompleteClassDeclaration = 'incompleteClassDeclaration',
  IncorrectInheritanceList = 'incorrectInheritanceList',
  ExpectedClassName = 'expectedClassName',
  ExpectedBinaryOperator = 'expectedBinaryOperator',
  ExpectedUnaryOperatorOrArgument = 'expectedUnaryOperatorOrArgument',
  ExpectedExpressionValue = 'expectedExpressionValue',
  ExpectedRightOperand = 'expectedRightOperand',
  UnexpectedEndOfCall = 'unexpectedEndOfCall',
  ExpectedNamedArgumentNameInCall = 'expectedNamedArgumentNameInCall',
  OrderedArgumentAfterNamed = 'orderedArgumentAfterNamed',
  ExpectedEndOfIndexer = 'expectedEndOfIndexer',
  ExpectedListDefinition = 'expectedListDefinition',
  ExpectedListExpression = 'expectedListExpression',
  ExpectedEndOfListDefinition = 'expectedEndOfListDefinition',
  ListExpectedCommaOrRightSquareBracket = 'listExpectedCommaOrRightSquareBracket',
  ComprehensionExpectedIdentifier = 'comprehensionExpectedIdentifier',
  ComprehensionExpectedInKeyword = 'comprehensionExpectedInKeyword',
  ComprehensionNoArguments = 'comprehensionNoArguments',
  ExpectedTupleBody = 'expectedTupleBody',
  ExpectedTupleEnd = 'expectedTupleEnd',
  ExpectedSetBody = 'expectedSetBody',
  SetMixedWithAndWithoutColon = 'setMixedWithAndWithoutColon',
  ExpectedStringLiteralInSet = 'expectedStringLiteralInSet',
  ExpectedSetEnd = 'expectedSetEnd',
  ConditionNoIfArgument = 'conditionNoIfArgument',
  IfExpressionExpectedElse = 'ifExpressionExpectedElse',
  ExpectedLiteral = 'expectedLiteral',
  UnexpectedBlockEnd = 'unexpectedBlockEnd',
  BlockInCombinedLine = 'blockInCombinedLine',
  CannotFindIfForElseOrElsif = 'cannotFindIfForElseOrElsif',
  ExpectedExceptOrFinallyAfterTry = 'expectedExceptOrFinallyAfterTry',
  CannotFindTryForExceptOrFinally = 'cannotFindTryForExceptOrFinally',
  CannotFindIfOrElifForElif = 'cannotFindIfOrElifForElif',
  CannotFindIfOrElifForElse = 'cannotFindIfOrElifForElse',
  IncompleteImportDefinition = 'incompleteImportDefinition',
  IncompleteImportFromDefinition = 'incompleteImportFromDefinition',
  ImportFromDefinitionIsTooLong = 'importFromDefinitionIsTooLong',
  ImportFromExpectedImport = 'importFromExpectedImport',
  ImportFromExpectedIdentifier = 'importFromExpectedIdentifier',
  ImportDefinitionIsTooLong = 'importDefinitionIsTooLong',
  ImportExpectedIdentifier = 'importExpectedIdentifier',
  ImportExpectedAsIdentifier = 'importExpectedAsIdentifier',
  PassHasNoArguments = 'passHasNoArguments',
  BreakHasNoArguments = 'breakHasNoArguments',
  ContinueHasNoArguments = 'continueHasNoArguments',
  RaiseExpectedEndOfLine = 'raiseExpectedEndOfLine',
  ReturnOrYieldExpectedEndOfLine = 'returnOrYieldExpectedEndOfLine',
  ExceptExpectedTry = 'exceptExpectedTry',
  ExceptExpectedRightBracket = 'exceptExpectedRightBracket',
  ExceptExpectedIdentifierAfterAs = 'exceptExpectedIdentifierAfterAs',
  ExceptExpectedIdentifier = 'exceptExpectedIdentifier',
  FinallyCannotFindTry = 'finallyCannotFindTry',
  FunctionCallExpectedArguments = 'functionCallExpectedArguments',
  FunctionExpectedCommaOrRightBracket = 'functionExpectedCommaOrRightBracket',
  FunctionExpectedEndOfArguments = 'functionExpectedEndOfArguments',
  ExceptExpectedArguments = 'exceptExpectedArguments',
  ExpectedExpression = 'expectedExpression',
  MixingAugmentedOperators = 'mixingAugmentedOperators',
  ExpectedYieldExpression = 'expectedYieldExpression',
  ExpectedEndOfIdentifierForDel = 'expectedEndOfIdentifierForDel',
  ExpectedIdentifierForDel = 'expectedIdentifierForDel',
  WithExpectedAs = 'withExpectedAs',
  ExpectedOnlyIdentifier = 'expectedOnlyIdentifier',

  UnknownUnaryOperator = 'unknownUnaryOperator',
  UnknownBinaryOperator = 'unknownBinaryOperator',
  ExpectedEndOfExpression = 'expectedEndOfExpression',
  ErrorUnexpectedScenario01 = 'errorUnexpectedScenario01',
  ErrorUnexpectedScenario02 = 'errorUnexpectedScenario02',
  ErrorUnexpectedScenario03 = 'errorUnexpectedScenario03',
  ErrorUnexpectedScenario04 = 'errorUnexpectedScenario04',
}
